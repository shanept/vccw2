---

# Database Settings
- name: Create Database
  become: yes
  mysql_db:
    login_unix_socket: "{{ mysql_socket }}"
    name: "{{ vccw.db_name }}"
    state: present

- name: Add Admin user (with grant option)
  become: yes
  mysql_user:
    login_unix_socket: "{{ mysql_socket }}"
    name: "admin"
    password: "{{ vccw.db_admin_pass | default(vccw.db_pass) }}"
    priv: "*.*:ALL,GRANT"
    host: "localhost"
    state: present

- name: Create MySQL user
  become: yes
  mysql_user:
    login_unix_socket: "{{ mysql_socket }}"
    name: "{{ vccw.db_user }}"
    password: "{{ vccw.db_pass }}"
    priv: "{{ vccw.db_name }}.*:ALL"
    host: "%"
    state: present

- name: "Change owner of the {{ wp_path }}"
  become: yes
  file:
    path: "{{ wp_path }}"
    state: directory
    owner: "{{ ansible_env.USER | default( 'ubuntu' ) }}"
    group: "{{ ansible_env.USER | default( 'ubuntu' ) }}"
    recurse: yes

- import_tasks: wp-cli.yml
- import_tasks: commands.yml

# download wordpress
- name: Run `wp core download`
  command: |
    wp core download
    --path={{ wp_path }}
    --version={{ vccw.version }}
    --force

# wp-config.php
- name: Create temporary file for extra-php in wp-config.php
  template:
    src: templates/extra-wp-config.php
    dest: "/tmp/extra-wp-config.php"

- name: Run `wp core config`
  shell: |
     wp core config \
     --force \
     --path={{ wp_path }} \
     --dbhost={{ vccw.db_host }} \
     --dbname={{ vccw.db_name }} \
     --dbuser={{ vccw.db_user }} \
     --dbpass={{ vccw.db_pass }} \
     --dbprefix={{ vccw.db_prefix }} \
     --locale={{ vccw.lang }} \
     --extra-php < /tmp/extra-wp-config.php

# Reset Database
- name: Run `wp db reset`
  command: wp db reset --yes --path={{ wp_path }}
  when: vccw.reset_db_on_provision

# install wordpress
- name: Run `wp core install`
  command: |
    wp core install
    --path={{ wp_path }}
    --url=http://{{ vccw.hostname }}/{{ vccw.wp_siteurl }}
    --title='{{ vccw.title }}'
    --admin_user={{ vccw.admin_user }}
    --admin_password={{ vccw.admin_pass }}
    --admin_email={{ vccw.admin_email }}

- stat:
    path: "{{ wp_path }}/.gitignore"
  register: st

- name: Create `.gitignore`
  get_url:
    url: "{{ vccw.gitignore }}"
    dest: /tmp/.gitignore
    mode: 0644
    force: yes
  when: st.stat.exists != true

- name: Move `.gitignore`
  command: "mv /tmp/.gitignore {{ wp_path }}/.gitignore"
  when: st.stat.exists != true

- name: Run `wp core language install`
  command: |
    wp core language install {{ vccw.lang }}
    --path={{ wp_path }}
    --activate

# Install Plugins
- name: Run `wp plugin install`
  command: |
    wp plugin install {{ item }}
    --activate
    --path={{ wp_path }}
    --force
  with_items: "{{ vccw.plugins | default([]) }}"

# Install wp-multibyte-patch
- name: Run `wp plugin install wp-multibyte-patch`
  command: |
    wp plugin install wp-multibyte-patch
    --activate
    --path={{ wp_path }}
    --force
  when: vccw.lang == 'ja'

# Install Theme
- name: Run `wp theme install`
  command: |
    wp theme install {{ vccw.theme }}
    --path={{ wp_path }} --activate --force
  when: vccw.theme != ''

# Import Theme Unit Test Data
- name: Install `wordpress-importer`
  command: |
    wp plugin install https://github.com/WordPress/wordpress-importer/archive/master.zip
    --activate
    --path={{ wp_path }}
    --force
  when: vccw.theme_unit_test

- name: Download WordPress theme unit test data
  when: vccw.theme_unit_test
  get_url:
    url: "{{ vccw.theme_unit_test_uri }}"
    dest: "/tmp/theme-unit-test-data.xml"

- name: Import WordPress theme unit test data
  when: vccw.theme_unit_test
  command: |
    wp import
    /tmp/theme-unit-test-data.xml
    --authors=create
    --path={{ wp_path }}

# Import Options
- name: Run `wp options update`
  command: |
    wp option update {{ item.key }} '{{ item.value }}'
    --path={{ wp_path }}
  with_dict: "{{ vccw.options }}"

# Localization
- name: Get the timezone
  command: |
    wp eval "echo _x( '0', 'default GMT offset or timezone string' );"
    --path={{ wp_path }}
  register: timezone

- name: Update timezone
  command: |
    wp option update timezone_string '{{ timezone.stdout }}'
    --path={{ wp_path }}

- name: Get the date format
  command: |
    wp eval "echo __( 'M jS Y' );"
    --path={{ wp_path }}
  register: date_format

- name: Update date format
  command: |
    wp option update date_format '{{ date_format.stdout }}'
    --path={{ wp_path }}

# Setting Permalink
- name: Run `wp rewrite structure`
  command: |
    wp rewrite structure {{ vccw.rewrite_structure }}
    --path={{ wp_path }}

- name: Flush rewrite rules
  command: |
    wp rewrite flush
    --hard
    --path={{ wp_path }}

 # multisite Settings
- name: Run `wp core multisite-convert`
  when: vccw.multisite
  command: |
    wp core multisite-convert
    --path={{ wp_path }}

- name: Create `.htaccess` for multisite
  when: vccw.multisite
  template:
    src: templates/multisite-htaccess
    dest: "{{ vccw.document_root }}/.htaccess"

- name: Setting up Wordpress multisite options
  command: |
    wp network meta update 1 {{ item.key }} '{{ item.value }}'
    --path={{ wp_path }}
  with_dict: "{{ vccw.multisite_options | default({}) }}"
  when: vccw.multisite

# Generate Movefile
- name: Check `wp scaffold movefile` exists.
  shell: bash -lc 'wp help scaffold movefile &> /dev/null; echo $?'
  register: is_command

- stat:
    path: "{{ vccw.vagrant_dir }}/Movefile"
  register: is_movefile

- name: Create a Movefile
  become: no
  shell: /bin/bash -lc "wp scaffold movefile --path={{ wp_path }} --force"
  args:
    chdir: "{{ vccw.vagrant_dir }}"
    creates: Movefile.yml
  when: is_command.stdout == "0" and is_movefile.stat.exists != true
